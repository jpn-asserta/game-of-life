# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Create complete release

on:
  workflow_dispatch:
    inputs:
      app_version:
        description: 'Aplication version:'
        required: true
        type: string
        default: '1.0.0'
      db_version:
        description: 'DB version:'
        required: true
        type: string
        default: '01.00.000'

permissions:
  contents: write

env:
  JAVA_VERSION: '21'
  LIB_SAVEGRID_PATH: 'lib/savegrid-1.0.jar'
  LIB_SAVEGRID_VERSION: '1.0'
  REPORT_SURFIRE: 'surfire-report'
  REPORT_JACOCO: 'jacoco-report'
  VERSION_FILE: 'src/main/resources/version.properties'
  WAR_NAME: 'gameoflife'
  
jobs:
  build:
    runs-on: ubuntu-latest

    steps:

      - name: Set VERSION_APP
        run: echo "VERSION_APP=${{ github.event.inputs.app_version }}.${{ github.run_number }}" >> $GITHUB_ENV
    
      - name: Checkout code
        uses: actions/checkout@v4     
        with:
          fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}

      - name: Install savegrid-1.0.jar to local Maven repo
        run: |
          mvn install:install-file \
            -Dfile=${{ env.LIB_SAVEGRID_PATH }} \
            -DgroupId=com.asserta \
            -DartifactId=savegrid \
            -Dversion=${{ env.LIB_SAVEGRID_VERSION }} \
            -Dpackaging=jar

      - name: Generate changelog
        run: |
          git log -1 --pretty=format:"%h - %s (%an)" > CHANGELOG.md
          cat CHANGELOG.md

     # - name: Extract versions from pom.xml
     #   id: get_version
     #   run: |
     #     APP_VERSION=$(mvn help:evaluate -Dexpression=app-version -q -DforceStdout)
     #     echo "APP_VERSION=$APP_VERSION" >> $GITHUB_ENV
     #     BD_VERSION=$(mvn help:evaluate -Dexpression=bd-version -q -DforceStdout)
     #     echo "APP_VERSION=$APP_VERSION" >> $GITHUB_ENV
     #     BD_H_VERSION=$(mvn help:evaluate -Dexpression=bd-version-historica -q -DforceStdout)
     #     echo "APP_VERSION=$APP_VERSION" >> $GITHUB_ENV

      - name: Create version.properties file
        run: |
          echo "version.tecnica=$VERSION_APP" > $VERSION_FILE
          echo "version.comercial=${{ github.event.inputs.app_version }}" >> $VERSION_FILE
          echo "version.bd=${{ github.event.inputs.db_version }}" >> $VERSION_FILE

      - name: Change pom version
        run: mvn versions:set -DnewVersion=$VERSION_APP -DgenerateBackupPoms=false

      - name: Run JUnit tests
        run: mvn -B clean org.jacoco:jacoco-maven-plugin:prepare-agent test org.jacoco:jacoco-maven-plugin:report

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.REPORT_SURFIRE }}
          path: target/surefire-reports/

      - name: Upload JaCoCo report
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.REPORT_JACOCO }}
          path: target/site/jacoco/

      - name: Build WAR file
        run: mvn -B clean package -DskipTests=true

      - name: Upload WAR artifact
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: ${{ env.WAR_NAME }}
          path: target/*.war

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Commit and push pom.xml and VERSION_FILE
        run: |
          git add pom.xml
          git add $VERSION_FILE
          git commit -m "Update version to $VERSION_APP from workflow" || echo "No changes to commit"
          git push origin HEAD

      - name: Create tag
        run: |
          git tag -a "v$VERSION_APP" -m "Release $VERSION_APP"
          git push origin "v$VERSION_APP"

      - name: Upload WAR to Release
        uses: softprops/action-gh-release@v2
        if: success()
        with:
          tag_name: v${{ env.VERSION_APP }}
          name: Release v${{ env.VERSION_APP }}
          files: target/*.war
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Optional
      #- name: Publish to GitHub Packages
      #  run: mvn deploy
      #  env:
      #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Clean previous build
        run: mvn clean

    # Optional: Uploads the full dependency graph to GitHub to improve the quality of Dependabot alerts this repository can receive
      - name: Update dependency graph
        uses: advanced-security/maven-dependency-submission-action@v5
